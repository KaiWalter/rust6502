use crossbeam_channel::*;
use rust6502::address_bus::*;
use rust6502::mc6821::*;
use rust6502::memory::*;
use rust6502::mos6502::*;

use crate::wasm_terminal::WasmTerminal;

pub struct Apple1Compact<'a> {
    pub cpu: Cpu<'a>,
    pub terminal: WasmTerminal,
    pub check_input: Option<Box<dyn Fn()>>,
}

impl Apple1Compact<'static> {
    pub fn new(
        tx_apple_output: Sender<u8>,
        rx_apple_output: Receiver<u8>,
        rx_apple_input: Receiver<InputSignal>,
    ) -> Apple1Compact<'static> {
        let mut bus = Apple1CompactBus::new(
            Memory::new(0, 4 * 1024),
            Memory::from_vec(
                0xFF00,
                vec![
                    0xd8, 0x58, 0xa0, 0x7f, 0x8c, 0x12, 0xd0, 0xa9, 0xa7, 0x8d, 0x11, 0xd0, 0x8d,
                    0x13, 0xd0, 0xc9, 0xdf, 0xf0, 0x13, 0xc9, 0x9b, 0xf0, 0x03, 0xc8, 0x10, 0x0f,
                    0xa9, 0xdc, 0x20, 0xef, 0xff, 0xa9, 0x8d, 0x20, 0xef, 0xff, 0xa0, 0x01, 0x88,
                    0x30, 0xf6, 0xad, 0x11, 0xd0, 0x10, 0xfb, 0xad, 0x10, 0xd0, 0x99, 0x00, 0x02,
                    0x20, 0xef, 0xff, 0xc9, 0x8d, 0xd0, 0xd4, 0xa0, 0xff, 0xa9, 0x00, 0xaa, 0x0a,
                    0x85, 0x2b, 0xc8, 0xb9, 0x00, 0x02, 0xc9, 0x8d, 0xf0, 0xd4, 0xc9, 0xae, 0x90,
                    0xf4, 0xf0, 0xf0, 0xc9, 0xba, 0xf0, 0xeb, 0xc9, 0xd2, 0xf0, 0x3b, 0x86, 0x28,
                    0x86, 0x29, 0x84, 0x2a, 0xb9, 0x00, 0x02, 0x49, 0xb0, 0xc9, 0x0a, 0x90, 0x06,
                    0x69, 0x88, 0xc9, 0xfa, 0x90, 0x11, 0x0a, 0x0a, 0x0a, 0x0a, 0xa2, 0x04, 0x0a,
                    0x26, 0x28, 0x26, 0x29, 0xca, 0xd0, 0xf8, 0xc8, 0xd0, 0xe0, 0xc4, 0x2a, 0xf0,
                    0x97, 0x24, 0x2b, 0x50, 0x10, 0xa5, 0x28, 0x81, 0x26, 0xe6, 0x26, 0xd0, 0xb5,
                    0xe6, 0x27, 0x4c, 0x44, 0xff, 0x6c, 0x24, 0x00, 0x30, 0x2b, 0xa2, 0x02, 0xb5,
                    0x27, 0x95, 0x25, 0x95, 0x23, 0xca, 0xd0, 0xf7, 0xd0, 0x14, 0xa9, 0x8d, 0x20,
                    0xef, 0xff, 0xa5, 0x25, 0x20, 0xdc, 0xff, 0xa5, 0x24, 0x20, 0xdc, 0xff, 0xa9,
                    0xba, 0x20, 0xef, 0xff, 0xa9, 0xa0, 0x20, 0xef, 0xff, 0xa1, 0x24, 0x20, 0xdc,
                    0xff, 0x86, 0x2b, 0xa5, 0x24, 0xc5, 0x28, 0xa5, 0x25, 0xe5, 0x29, 0xb0, 0xc1,
                    0xe6, 0x24, 0xd0, 0x02, 0xe6, 0x25, 0xa5, 0x24, 0x29, 0x07, 0x10, 0xc8, 0x48,
                    0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0xe5, 0xff, 0x68, 0x29, 0x0f, 0x09, 0xb0, 0xc9,
                    0xba, 0x90, 0x02, 0x69, 0x06, 0x2c, 0x12, 0xd0, 0x30, 0xfb, 0x8d, 0x12, 0xd0,
                    0x60, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00,
                ],
            ),
            tx_apple_output,
            rx_apple_input,
        );
        Apple1Compact {
            cpu: Cpu::new(CpuRegisters::default(), &mut bus),
            terminal: WasmTerminal::new(rx_apple_output),
            check_input: None,
        }
    }
}

pub struct Apple1CompactBus {
    pub mem: Memory,
    pub rom_monitor: Memory,
    pub pia: MC6821,
}

impl<'a> Apple1CompactBus {
    pub fn new(
        mem: Memory,
        rom_monitor: Memory,
        tx_apple_output: Sender<u8>,
        rx_apple_input: Receiver<InputSignal>,
    ) -> Apple1CompactBus {
        let mut pia = MC6821::new();
        pia.set_output_channel_b(tx_apple_output);
        pia.set_input_channel(rx_apple_input);
        Apple1CompactBus {
            mem,
            rom_monitor,
            pia,
        }
    }
}

impl ExternalAddressing for Apple1CompactBus {
    fn read(&mut self, addr: u16) -> Result<u8, AddressingError> {
        match addr {
            0x0000..=0x1000 => Ok(self.mem.int_read(addr)),
            0x1001..=0xCFFF => Err(AddressingError::new("read", addr)),
            0xD000..=0xD1FF => Ok(self.pia.int_read(addr)),
            0xD200..=0xFEFF => Err(AddressingError::new("read", addr)),
            0xFF00..=0xFFFF => Ok(self.rom_monitor.int_read(addr)),
        }
    }

    fn write(&mut self, addr: u16, data: u8) -> Result<(), AddressingError> {
        match addr {
            0x0000..=0x1000 => Ok(self.mem.int_write(addr, data)),
            0x1001..=0xCFFF => Err(AddressingError::new("read", addr)),
            0xD000..=0xD1FF => Ok(self.pia.int_write(addr, data)),
            0xD200..=0xFFFF => Err(AddressingError::new("write", addr)),
        }
    }
}
