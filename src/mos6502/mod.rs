macro_rules! instr {
    ($name:expr,$operation:expr,$address_mode:expr,$cycles:expr) => {{
        OperationDefinition {
            name: $name,
            operation: $operation,
            address_mode: $address_mode,
            cycles: $cycles,
        }
    }};
}

type AddressModeFunction = fn();
type OpCodeFunction = fn();

struct OperationDefinition<'a> {
    name: &'a str,
    operation: OpCodeFunction,
    address_mode: AddressModeFunction,
    cycles: u8,
}

static OPCODES: [OperationDefinition; 256] = [
    instr! {"BRK", BRK, IMM, 7},
    instr! {"ORA", ORA, IZX, 6},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 3},
    instr! {"ORA", ORA, ZP0, 3},
    instr! {"ASL", ASL, ZP0, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"PHP", PHP, IMP, 3},
    instr! {"ORA", ORA, IMM, 2},
    instr! {"ASL", ASL, IMP, 2},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", NOP, IMP, 4},
    instr! {"ORA", ORA, ABS, 4},
    instr! {"ASL", ASL, ABS, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"BPL", BPL, REL, 2},
    instr! {"ORA", ORA, IZY, 5},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 4},
    instr! {"ORA", ORA, ZPX, 4},
    instr! {"ASL", ASL, ZPX, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"CLC", CLC, IMP, 2},
    instr! {"ORA", ORA, ABY, 4},
    instr! {"???", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 7},
    instr! {"???", NOP, IMP, 4},
    instr! {"ORA", ORA, ABX, 4},
    instr! {"ASL", ASL, ABX, 7},
    instr! {"???", XXX, IMP, 7},
    instr! {"JSR", JSR, ABS, 6},
    instr! {"AND", AND, IZX, 6},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"BIT", BIT, ZP0, 3},
    instr! {"AND", AND, ZP0, 3},
    instr! {"ROL", ROL, ZP0, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"PLP", PLP, IMP, 4},
    instr! {"AND", AND, IMM, 2},
    instr! {"ROL", ROL, IMP, 2},
    instr! {"???", XXX, IMP, 2},
    instr! {"BIT", BIT, ABS, 4},
    instr! {"AND", AND, ABS, 4},
    instr! {"ROL", ROL, ABS, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"BMI", BMI, REL, 2},
    instr! {"AND", AND, IZY, 5},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 4},
    instr! {"AND", AND, ZPX, 4},
    instr! {"ROL", ROL, ZPX, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"SEC", SEC, IMP, 2},
    instr! {"AND", AND, ABY, 4},
    instr! {"???", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 7},
    instr! {"???", NOP, IMP, 4},
    instr! {"AND", AND, ABX, 4},
    instr! {"ROL", ROL, ABX, 7},
    instr! {"???", XXX, IMP, 7},
    instr! {"RTI", RTI, IMP, 6},
    instr! {"EOR", EOR, IZX, 6},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 3},
    instr! {"EOR", EOR, ZP0, 3},
    instr! {"LSR", LSR, ZP0, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"PHA", PHA, IMP, 3},
    instr! {"EOR", EOR, IMM, 2},
    instr! {"LSR", LSR, IMP, 2},
    instr! {"???", XXX, IMP, 2},
    instr! {"JMP", JMP, ABS, 3},
    instr! {"EOR", EOR, ABS, 4},
    instr! {"LSR", LSR, ABS, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"BVC", BVC, REL, 2},
    instr! {"EOR", EOR, IZY, 5},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 4},
    instr! {"EOR", EOR, ZPX, 4},
    instr! {"LSR", LSR, ZPX, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"CLI", CLI, IMP, 2},
    instr! {"EOR", EOR, ABY, 4},
    instr! {"???", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 7},
    instr! {"???", NOP, IMP, 4},
    instr! {"EOR", EOR, ABX, 4},
    instr! {"LSR", LSR, ABX, 7},
    instr! {"???", XXX, IMP, 7},
    instr! {"RTS", RTS, IMP, 6},
    instr! {"ADC", ADC, IZX, 6},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 3},
    instr! {"ADC", ADC, ZP0, 3},
    instr! {"ROR", ROR, ZP0, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"PLA", PLA, IMP, 4},
    instr! {"ADC", ADC, IMM, 2},
    instr! {"ROR", ROR, IMP, 2},
    instr! {"???", XXX, IMP, 2},
    instr! {"JMP", JMP, IND, 5},
    instr! {"ADC", ADC, ABS, 4},
    instr! {"ROR", ROR, ABS, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"BVS", BVS, REL, 2},
    instr! {"ADC", ADC, IZY, 5},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 4},
    instr! {"ADC", ADC, ZPX, 4},
    instr! {"ROR", ROR, ZPX, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"SEI", SEI, IMP, 2},
    instr! {"ADC", ADC, ABY, 4},
    instr! {"???", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 7},
    instr! {"???", NOP, IMP, 4},
    instr! {"ADC", ADC, ABX, 4},
    instr! {"ROR", ROR, ABX, 7},
    instr! {"???", XXX, IMP, 7},
    instr! {"???", NOP, IMP, 2},
    instr! {"STA", STA, IZX, 6},
    instr! {"???", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 6},
    instr! {"STY", STY, ZP0, 3},
    instr! {"STA", STA, ZP0, 3},
    instr! {"STX", STX, ZP0, 3},
    instr! {"???", XXX, IMP, 3},
    instr! {"DEY", DEY, IMP, 2},
    instr! {"???", NOP, IMP, 2},
    instr! {"TXA", TXA, IMP, 2},
    instr! {"???", XXX, IMP, 2},
    instr! {"STY", STY, ABS, 4},
    instr! {"STA", STA, ABS, 4},
    instr! {"STX", STX, ABS, 4},
    instr! {"???", XXX, IMP, 4},
    instr! {"BCC", BCC, REL, 2},
    instr! {"STA", STA, IZY, 6},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 6},
    instr! {"STY", STY, ZPX, 4},
    instr! {"STA", STA, ZPX, 4},
    instr! {"STX", STX, ZPY, 4},
    instr! {"???", XXX, IMP, 4},
    instr! {"TYA", TYA, IMP, 2},
    instr! {"STA", STA, ABY, 5},
    instr! {"TXS", TXS, IMP, 2},
    instr! {"???", XXX, IMP, 5},
    instr! {"???", NOP, IMP, 5},
    instr! {"STA", STA, ABX, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"LDY", LDY, IMM, 2},
    instr! {"LDA", LDA, IZX, 6},
    instr! {"LDX", LDX, IMM, 2},
    instr! {"???", XXX, IMP, 6},
    instr! {"LDY", LDY, ZP0, 3},
    instr! {"LDA", LDA, ZP0, 3},
    instr! {"LDX", LDX, ZP0, 3},
    instr! {"???", XXX, IMP, 3},
    instr! {"TAY", TAY, IMP, 2},
    instr! {"LDA", LDA, IMM, 2},
    instr! {"TAX", TAX, IMP, 2},
    instr! {"???", XXX, IMP, 2},
    instr! {"LDY", LDY, ABS, 4},
    instr! {"LDA", LDA, ABS, 4},
    instr! {"LDX", LDX, ABS, 4},
    instr! {"???", XXX, IMP, 4},
    instr! {"BCS", BCS, REL, 2},
    instr! {"LDA", LDA, IZY, 5},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 5},
    instr! {"LDY", LDY, ZPX, 4},
    instr! {"LDA", LDA, ZPX, 4},
    instr! {"LDX", LDX, ZPY, 4},
    instr! {"???", XXX, IMP, 4},
    instr! {"CLV", CLV, IMP, 2},
    instr! {"LDA", LDA, ABY, 4},
    instr! {"TSX", TSX, IMP, 2},
    instr! {"???", XXX, IMP, 4},
    instr! {"LDY", LDY, ABX, 4},
    instr! {"LDA", LDA, ABX, 4},
    instr! {"LDX", LDX, ABY, 4},
    instr! {"???", XXX, IMP, 4},
    instr! {"CPY", CPY, IMM, 2},
    instr! {"CMP", CMP, IZX, 6},
    instr! {"???", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"CPY", CPY, ZP0, 3},
    instr! {"CMP", CMP, ZP0, 3},
    instr! {"DEC", DEC, ZP0, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"INY", INY, IMP, 2},
    instr! {"CMP", CMP, IMM, 2},
    instr! {"DEX", DEX, IMP, 2},
    instr! {"???", XXX, IMP, 2},
    instr! {"CPY", CPY, ABS, 4},
    instr! {"CMP", CMP, ABS, 4},
    instr! {"DEC", DEC, ABS, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"BNE", BNE, REL, 2},
    instr! {"CMP", CMP, IZY, 5},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 4},
    instr! {"CMP", CMP, ZPX, 4},
    instr! {"DEC", DEC, ZPX, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"CLD", CLD, IMP, 2},
    instr! {"CMP", CMP, ABY, 4},
    instr! {"NOP", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 7},
    instr! {"???", NOP, IMP, 4},
    instr! {"CMP", CMP, ABX, 4},
    instr! {"DEC", DEC, ABX, 7},
    instr! {"???", XXX, IMP, 7},
    instr! {"CPX", CPX, IMM, 2},
    instr! {"SBC", SBC, IZX, 6},
    instr! {"???", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"CPX", CPX, ZP0, 3},
    instr! {"SBC", SBC, ZP0, 3},
    instr! {"INC", INC, ZP0, 5},
    instr! {"???", XXX, IMP, 5},
    instr! {"INX", INX, IMP, 2},
    instr! {"SBC", SBC, IMM, 2},
    instr! {"NOP", NOP, IMP, 2},
    instr! {"???", SBC, IMP, 2},
    instr! {"CPX", CPX, ABS, 4},
    instr! {"SBC", SBC, ABS, 4},
    instr! {"INC", INC, ABS, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"BEQ", BEQ, REL, 2},
    instr! {"SBC", SBC, IZY, 5},
    instr! {"???", XXX, IMP, 2},
    instr! {"???", XXX, IMP, 8},
    instr! {"???", NOP, IMP, 4},
    instr! {"SBC", SBC, ZPX, 4},
    instr! {"INC", INC, ZPX, 6},
    instr! {"???", XXX, IMP, 6},
    instr! {"SED", SED, IMP, 2},
    instr! {"SBC", SBC, ABY, 4},
    instr! {"NOP", NOP, IMP, 2},
    instr! {"???", XXX, IMP, 7},
    instr! {"???", NOP, IMP, 4},
    instr! {"SBC", SBC, ABX, 4},
    instr! {"INC", INC, ABX, 7},
    instr! {"???", XXX, IMP, 7},
];

fn BRK() {}

fn IMP() {}

pub fn cycle() {
    println!("6502 cycle");
    let dummy = &OPCODES[0];
    println!("{}", dummy.name);
}
